<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--开启注解扫描指定包中带有注解的类-->
    <context:component-scan base-package="com.gerry.jnshu"/>
    <!--<bean id="studentService" class="com.gerry.jnshu.service.impl.StudentServiceImpl">-->
        <!--<property name="jdbcTemplate" ref="jdbcTemplate"></property>-->
    <!--</bean>-->

    <context:property-placeholder location="classpath:db.properties"/>
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->
    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${druid.url}" />
        <property name="username" value="${druid.username}" />
        <property name="password" value="${druid.password}" />
        <property name = "driverClassName" value = "${druid.driverClassName}" />

        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>


    <!--&lt;!&ndash; 配置sqlSessionFactory，SqlSessionFactoryBean是用来产生sqlSessionFactory的 &ndash;&gt;-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的全局配置文件，放在classpath下的mybatis文件夹中了 -->
        <property name="configLocation" value="classpath:mybatis/MybatisConfig.xml"/>
        <!-- 加载数据源，使用上面配置好的数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="mapperLocations" value="classpath*:com/gary/maventutorial/mappers/**/*.xml" />-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gerry.jnshu.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--&lt;!&ndash;配置通知、增强&ndash;&gt;-->
    <!--<bean name="myAdvice" class="com.gerry.jnshu.advice.MyAdvice"/>-->
    <!--&lt;!&ndash;AOP配置&ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:aspect ref="myAdvice">-->
            <!--<aop:pointcut id="pointcut" expression="execution(* *..*.*ServiceImpl.*(..))"/>-->
            <!--<aop:before method="log" pointcut-ref="pointcut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
            <!--<tx:attributes>-->
                <!--<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="exec*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="remove*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="minus*" propagation="REQUIRED" isolation="READ_COMMITTED" />-->
                <!--<tx:method name="find*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="true" />-->
                <!--<tx:method name="get*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="true" />-->
            <!--</tx:attributes>-->
        <!--</tx:advice>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="txPointcut" expression="execution(* com.gerry.jnshu.service..*.*(..))" />-->
        <!--<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />-->
    <!--</aop:config>-->

    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>